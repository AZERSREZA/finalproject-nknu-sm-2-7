import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class show_tchAccSystem extends JFrame implements ActionListener {
 // 刪除資料使用者帳號
 public void del(String value) {
  Connection c = null;
  Statement stmt = null;
  try {
   Class.forName("org.postgresql.Driver");
   c = DriverManager.getConnection("jdbc:postgresql://localhost:5432/java", "postgres", "030741");
   System.out.println("Opened database successfully");
   stmt = c.createStatement();
   String sql;
   sql = "DELETE FROM teacheraccount " + "WHERE teacherid='" + value + "'";

   ResultSet rs = stmt.executeQuery(sql);

   rs.close();
   stmt.close();
   c.close();
  } catch (SQLException se) {
   // 处理 JDBC 错误
   se.printStackTrace();
  } catch (Exception e) {
   // 处理 Class.forName 错误
   e.printStackTrace();
  } finally {
   // 关闭资源
   try {
    if (stmt != null)
     stmt.close();
   } catch (SQLException se2) {
   } // 什么都不做
   try {
    if (c != null)
     c.close();
   } catch (SQLException se) {
    se.printStackTrace();
   }
  }
 }

 // 查看資料使用者帳號密碼
 public ArrayList see() {
  Connection conn = null;
  Statement stmt = null;
  ArrayList alist = new ArrayList();
  alist.clear();
  try {
   Class.forName("org.postgresql.Driver");
   conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/java", "postgres", "030741");
   System.out.println("Opened database successfully");
   stmt = conn.createStatement();
   String sql;
   sql = "SELECT * FROM teacheraccount";
   ResultSet rs = stmt.executeQuery(sql);

   while (rs.next()) {
    String teacherid = rs.getString("teacherid");
    String name = rs.getString("name");
    String password = rs.getString("password");
    String gender = rs.getString("gender");
    String email = rs.getString("gmail");

    alist.add(teacherid);
    alist.add(name);
    alist.add(password);
    alist.add(gender);
    alist.add(email);

   }
   rs.close();
   stmt.close();
   conn.close();
  } catch (SQLException se) {
   // 处理 JDBC 错误
   se.printStackTrace();
  } catch (Exception e) {
   // 处理 Class.forName 错误
   e.printStackTrace();
  } finally {
   // 关闭资源
   try {
    if (stmt != null)
     stmt.close();
   } catch (SQLException se2) {
   } // 什么都不做
   try {
    if (conn != null)
     conn.close();
   } catch (SQLException se) {
    se.printStackTrace();
   }
  }
  return alist;
 }

 private static JFrame userframe = new JFrame("帳號管理");

 private static JButton add = new JButton("新增帳號");
 private static JButton delete = new JButton("刪除帳號");
 private static JButton reback = new JButton("返回");

 String[] columns = new String[] { "老師帳號", "暱稱", "密碼", "性別", "email" };
 DefaultTableModel tableValue = new DefaultTableModel(columns, 0);
 JTable table = new JTable(tableValue);
 JScrollPane scrollable = new JScrollPane(table);
 private static JButton see = new JButton("查看全部");

 show_tchAccSystem() {
  userframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  userframe.setSize(1000, 1000);
  userframe.setLayout(null);
  userframe.setVisible(true);
  see.setBounds(450, 20, 80, 25);
  scrollable.setBounds(10, 80, 900, 420);
  add.setBounds(200, 600, 80, 25);
  delete.setBounds(300, 600, 80, 25);
  reback.setBounds(400, 600, 80, 25);

  userframe.add(see);
  userframe.add(scrollable);
  userframe.add(add);
  userframe.add(delete);
  userframe.add(reback);

  see.addActionListener(this);
  add.addActionListener(this);
  delete.addActionListener(this);
  reback.addActionListener(this);

 }

 public void actionPerformed(ActionEvent e) {
  if (e.getSource() == see) {
   ArrayList alist = new ArrayList();
   tableValue.setRowCount(0);
   alist = see();
   int count = 0;
   for (int i = 0; i < alist.size(); i += 5) {
    Object[] obj = { alist.get(0 + count * 5), alist.get(1 + count * 5), alist.get(2 + count * 5),
      alist.get(3 + count * 5), alist.get(4 + count * 5) };
    tableValue.addRow(obj);
    count++;
   }
  } else if (e.getSource() == add) {// 新增帳號，跳轉至新增老師帳號
   userframe.dispose();
   add_teacherAccount ad = new add_teacherAccount();
  } else if (e.getSource() == delete) {// 刪除帳號
   int i = table.getSelectedRow();
   if (i != -1) {
    int t = JOptionPane.showConfirmDialog(null, "確認刪除？");
    switch (t) {
    case JOptionPane.YES_OPTION:
     String b = (String) tableValue.getValueAt(i, 0);
     del(b);
    }
   }
  } else if (e.getSource() == reback) {// 返回
   userframe.dispose();
   system_gui sg = new system_gui();
  }
 }
}
